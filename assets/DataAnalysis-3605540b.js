import{r as o,o as c,c as r,a as e,b as n,d as a,e as t,w as l}from"./index-ff969378.js";const i={class:"md-content__inner md-typeset"},y={__name:"DataAnalysis",setup(d){return(u,s)=>{const p=o("router-link");return c(),r("article",i,[s[9]||(s[9]=e('<h1 id="analyzing-bot-data-with-jupyter-notebooks"> Jupyter 노트북을 활용한 봇 데이터 분석 <a class="headerlink" href="#analyzing-bot-data-with-jupyter-notebooks" title="영구 링크"> ¶ </a></h1><p> Jupyter 노트북을 사용하여 백테스트 및 거래 기록 결과를 쉽게 분석할 수 있습니다. 샘플 노트북은 <code> user_data/notebooks/ </code> 에 위치하며, 사용자 디렉토리를 초기화한 후 <code> freqtrade create-userdir --userdir user_data </code> 명령어를 실행하면 생성됩니다. </p><h2 id="quick-start-with-docker"> Docker를 활용한 빠른 시작 <a class="headerlink" href="#quick-start-with-docker" title="영구 링크"> ¶ </a></h2><p> Freqtrade는 Jupyter Lab 서버를 시작하는 docker-compose 파일을 제공합니다. 다음 명령어를 사용하여 서버를 실행할 수 있습니다: <code> docker compose -f docker/docker-compose-jupyter.yml up </code></p><p> 이 명령어는 Jupyter Lab을 실행하는 Docker 컨테이너를 생성하며, <code> https://127.0.0.1:8888/lab </code> 에서 접근할 수 있습니다. 간단한 로그인을 위해 시작 후 콘솔에 출력된 링크를 사용하세요. </p>',5)),n("p",null,[s[1]||(s[1]=a(" 자세한 내용은 ")),t(p,{to:"docker-quickstart"},{default:l(()=>s[0]||(s[0]=[a(" Docker를 사용한 데이터 분석 ")])),_:1}),s[2]||(s[2]=a(" 섹션을 참조하세요. "))]),s[10]||(s[10]=e(`<h3 id="pro-tips"> 전문가를 위한 팁 <a class="headerlink" href="#pro-tips" title="영구 링크"> ¶ </a></h3><ul><li><a href="https://jupyter.org/documentation"> jupyter.org </a> 에서 사용법을 확인하세요. </li><li> Conda 또는 venv 환경에서 Jupyter 노트북 서버를 시작하거나 <a href="https://github.com/Anaconda-Platform/nb_conda_kernels"> nb_conda_kernels </a> 를 사용하세요. </li><li>예제 노트북을 사용하기 전에 복사하여 업데이트 시 변경 사항이 덮어쓰이지 않도록 하세요.</li></ul><h3 id="using-virtual-environment-with-system-wide-jupyter-installation"> 시스템 전역 Jupyter 설치에서 가상 환경 활용하기 <a class="headerlink" href="#using-virtual-environment-with-system-wide-jupyter-installation" title="영구 링크"> ¶ </a></h3><p>시스템 전역 Jupyter 노트북 설치를 사용하면서 가상 환경의 Jupyter 커널을 사용하는 것이 유용할 수 있습니다. 이는 시스템당 Jupyter 전체를 여러 번 설치하지 않아도 되며, 작업 간 전환을 쉽게 만듭니다.</p><p>이를 위해 먼저 가상 환경을 활성화하고 다음 명령어를 실행하세요:</p><div class="highlight"><pre><code><span class="c1"># 가상 환경 활성화</span>
<span class="nb">source</span><span class="w"> </span>.venv/bin/activate

pip<span class="w"> </span>install<span class="w"> </span>ipykernel
ipython<span class="w"> </span>kernel<span class="w"> </span>install<span class="w"> </span>--user<span class="w"> </span>--name<span class="o">=</span>freqtrade
<span class="c1"># Jupyter (lab / notebook) 재시작</span>
<span class="c1"># 노트북에서 &quot;freqtrade&quot; 커널 선택</span>
</code></pre></div><div class="admonition note"><p class="admonition-title">참고</p><p> 이 섹션은 완전성을 위해 제공되며, Freqtrade 팀은 이 설정과 관련된 문제에 대해 완전한 지원을 제공하지 않습니다. 대신 Jupyter를 가상 환경에 직접 설치하는 것이 가장 쉬운 방법입니다. 이 설정에 대한 도움은 <a href="https://jupyter.org/"> Project Jupyter </a><a href="https://jupyter.org/documentation"> 문서 </a> 또는 <a href="https://jupyter.org/community"> 도움 채널 </a> 을 참조하세요. </p></div><div class="admonition warning"><p class="admonition-title">경고</p><p>일부 작업은 노트북에서 잘 작동하지 않을 수 있습니다. 예를 들어, 비동기 실행을 사용하는 작업은 Jupyter에서 문제가 될 수 있습니다. 또한, Freqtrade의 주요 진입점은 쉘 CLI이므로, 노트북에서 순수 Python을 사용하는 경우 도우미 함수에 필요한 객체와 매개변수를 제공하는 인수를 우회하게 됩니다. 이러한 값을 설정하거나 예상 객체를 수동으로 생성해야 할 수 있습니다.</p></div><h2 id="recommended-workflow"> 권장 작업 흐름 <a class="headerlink" href="#recommended-workflow" title="영구 링크"> ¶ </a></h2><table><thead><tr><th>작업</th><th>도구</th></tr></thead><tbody><tr><td>봇 운영</td><td>CLI</td></tr><tr><td>반복 작업</td><td>쉘 스크립트</td></tr><tr><td>데이터 분석 및 시각화</td><td>노트북</td></tr></tbody></table><ol><li><p>CLI를 사용하여</p><p>* 과거 데이터 다운로드 * 백테스트 실행 * 실시간 데이터로 실행 * 결과 내보내기</p></li><li><p>쉘 스크립트에 이러한 작업을 수집</p><p>* 인수가 있는 복잡한 명령 저장 * 다단계 작업 실행 * 전략 테스트 및 데이터 준비 자동화</p></li><li><p>노트북을 사용하여</p><p>* 데이터 시각화 * 데이터를 조작하고 플롯하여 통찰 생성</p></li></ol><h2 id="example-utility-snippets"> 유틸리티 코드 예제 <a class="headerlink" href="#example-utility-snippets" title="영구 링크"> ¶ </a></h2><h3 id="change-directory-to-root"> 루트 디렉토리로 변경 <a class="headerlink" href="#change-directory-to-root" title="영구 링크"> ¶ </a></h3><p>Jupyter 노트북은 노트북 디렉토리에서 실행됩니다. 다음 스니펫은 프로젝트 루트를 검색하여 상대 경로가 일관되도록 유지합니다.</p><div class="highlight"><pre><code><span class="kn">import</span><span class="w"> </span><span class="nn">os</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">pathlib</span><span class="w"> </span><span class="kn">import</span> <span class="n">Path</span>

<span class="c1"># 디렉토리 변경</span>
<span class="c1"># 출력이 올바른 경로를 표시하도록 이 셀을 수정하세요.</span>
<span class="c1"># 모든 경로를 셀 출력에 표시된 프로젝트 루트에 상대적으로 정의하세요.</span>
<span class="n">project_root</span> <span class="o">=</span> <span class="s2">&quot;somedir/freqtrade&quot;</span>
<span class="n">i</span><span class="o">=</span><span class="mi">0</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">project_root</span><span class="p">)</span>
    <span class="k">assert</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;LICENSE&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">is_file</span><span class="p">()</span>
<span class="k">except</span><span class="p">:</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">4</span> <span class="ow">and</span> <span class="p">(</span><span class="ow">not</span> <span class="n">Path</span><span class="p">(</span><span class="s1">&#39;LICENSE&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">is_file</span><span class="p">()):</span>
        <span class="n">os</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">Path</span><span class="p">(</span><span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">(),</span> <span class="s1">&#39;../&#39;</span><span class="p">))</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
    <span class="n">project_root</span> <span class="o">=</span> <span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">Path</span><span class="o">.</span><span class="n">cwd</span><span class="p">())</span>
</code></pre></div><h3 id="load-multiple-configuration-files"> 여러 구성 파일 로드 <a class="headerlink" href="#load-multiple-configuration-files" title="영구 링크"> ¶ </a></h3><p>이 옵션은 여러 구성 파일을 전달한 결과를 검사하는 데 유용할 수 있습니다. 또한 전체 구성 초기화를 실행하므로, 구성이 완전히 초기화되어 다른 메서드에 전달될 수 있습니다.</p><div class="highlight"><pre><code><span class="kn">import</span><span class="w"> </span><span class="nn">json</span>
<span class="kn">from</span><span class="w"> </span><span class="nn">freqtrade.configuration</span><span class="w"> </span><span class="kn">import</span> <span class="n">Configuration</span>

<span class="c1"># 여러 파일에서 구성 로드</span>
<span class="n">config</span> <span class="o">=</span> <span class="n">Configuration</span><span class="o">.</span><span class="n">from_files</span><span class="p">([</span><span class="s2">&quot;config1.json&quot;</span><span class="p">,</span> <span class="s2">&quot;config2.json&quot;</span><span class="p">])</span>

<span class="c1"># 메모리에 있는 구성 표시</span>
<span class="nb">print</span><span class="p">(</span><span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">config</span><span class="p">[</span><span class="s1">&#39;original_config&#39;</span><span class="p">],</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div><p> 대화형 환경에서는 <code> user_data_dir </code> 를 지정하는 추가 구성을 마지막에 전달하여 봇을 실행하는 동안 디렉토리를 변경할 필요가 없도록 하세요. Jupyter 노트북의 저장 위치에서 시작되므로 상대 경로는 피하는 것이 좋습니다. </p><div class="highlight"><pre><code><span class="p">{</span>
<span class="w">    </span><span class="nt">&quot;user_data_dir&quot;</span><span class="p">:</span><span class="w"> </span><span class="s2">&quot;~/.freqtrade/&quot;</span>
<span class="p">}</span>
</code></pre></div><h3 id="further-data-analysis-documentation"> 데이터 분석 관련 추가 문서 <a class="headerlink" href="#further-data-analysis-documentation" title="영구 링크"> ¶ </a></h3>`,21)),n("ul",null,[n("li",null,[t(p,{to:"strategy-analysis-example"},{default:l(()=>s[3]||(s[3]=[a(" 전략 디버깅 ")])),_:1}),s[4]||(s[4]=a(" - Jupyter 노트북으로도 제공됨 ( ")),s[5]||(s[5]=n("code",null," user_data/notebooks/strategy_analysis_example.ipynb ",-1)),s[6]||(s[6]=a(" ) "))]),n("li",null,[t(p,{to:"plotting"},{default:l(()=>s[7]||(s[7]=[a(" 플로팅 ")])),_:1})]),n("li",null,[t(p,{to:"advanced-backtesting"},{default:l(()=>s[8]||(s[8]=[a(" 태그 분석 ")])),_:1})])]),s[11]||(s[11]=n("p",null,"데이터를 분석하는 가장 좋은 방법에 대한 아이디어를 공유하고 싶다면 이 문서를 개선하는 이슈 또는 풀 리퀘스트를 제출하세요.",-1))])}}};export{y as default};
